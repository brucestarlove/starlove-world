---
import Layout from "../../layouts/Layout.astro";
import { getAllPosts, getPostBySlug } from "../../utils/posts.ts";

export async function getStaticPaths() {
  const posts = getAllPosts();
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;

if (!post) {
  return Astro.redirect("/");
}

// Convert markdown content to HTML using a simple parser
function parseMarkdown(content: string): string {
  return (
    content
      // Headers
      .replace(/^### (.*$)/gim, "<h3>$1</h3>")
      .replace(/^## (.*$)/gim, "<h2>$1</h2>")
      .replace(/^# (.*$)/gim, "<h1>$1</h1>")

      // Bold and italic
      .replace(/\*\*\*(.*?)\*\*\*/g, "<strong><em>$1</em></strong>")
      .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
      .replace(/\*(.*?)\*/g, "<em>$1</em>")

      // Links
      .replace(
        /\[([^\]]+)\]\(([^)]+)\)/g,
        '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>'
      )

      // Images
      .replace(
        /!\[([^\]]*)\]\(([^)]+)\)/g,
        '<img src="$2" alt="$1" loading="lazy" />'
      )

      // Code blocks
      .replace(
        /```(\w+)?\n([\s\S]*?)```/g,
        '<pre><code class="language-$1">$2</code></pre>'
      )
      .replace(/`([^`]+)`/g, "<code>$1</code>")

      // Tables
      .replace(/^\|(.+)\|\s*$/gim, (match, content) => {
        const cells = content
          .split("|")
          .map((cell: string) => cell.trim())
          .filter((cell: string) => cell);
        return (
          "<tr>" +
          cells.map((cell: string) => `<td>${cell}</td>`).join("") +
          "</tr>"
        );
      })

      // Blockquotes
      .replace(/^> (.*$)/gim, "<blockquote>$1</blockquote>")

      // Lists
      .replace(/^\* (.*$)/gim, "<li>$1</li>")
      .replace(/^(\d+)\. (.*$)/gim, "<li>$2</li>")

      // Paragraphs
      .replace(/\n\n/g, "</p><p>")
      .replace(/^(?!<[h|l|p|b|d|u|i])(.*$)/gim, "<p>$1</p>")

      // Clean up empty paragraphs and fix nesting
      .replace(/<p><\/p>/g, "")
      .replace(/<p>(<[h|l|b|d|u|i])/g, "$1")
      .replace(/(<\/[h|l|b|d|u|i][^>]*>)<\/p>/g, "$1")

      // Wrap consecutive list items in ul/ol
      .replace(/(<li>.*<\/li>)/g, (match) => {
        if (!match.includes("<ul>") && !match.includes("<ol>")) {
          return "<ul>" + match + "</ul>";
        }
        return match;
      })
  );
}

const htmlContent = parseMarkdown(post.content);
---

<Layout title={post.frontmatter.title}>
  <div class="post-detail" id="postDetail">
    <nav class="post-nav">
      <button class="back-button" id="backButton">
        <svg viewBox="0 0 24 24" width="20" height="20">
          <path
            fill="currentColor"
            d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"
          ></path>
        </svg>
        Back to Home
      </button>
    </nav>

    <header class="post-header">
      <div class="post-meta">
        <div class="post-info">
          <h1 class="post-title">{post.frontmatter.title}</h1>
          <p class="post-excerpt">{post.frontmatter.excerpt}</p>
          <div class="post-details">
            <span class="post-date"
              >{
                new Date(post.frontmatter.date).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                })
              }</span
            >
            <div class="post-tags-header">
              {
                post.frontmatter.tags.map((tag) => (
                  <span class="tag-badge" key={tag}>
                    {tag}
                  </span>
                ))
              }
            </div>
          </div>
        </div>
      </div>
    </header>

    <main class="post-content">
      <div class="content-wrapper" set:html={htmlContent} />
    </main>
  </div>

  <style>
    .post-detail {
      opacity: 1;
      transform: translateY(0);
      transition: all 0.8s ease-out;
      padding-bottom: 6rem;
      max-width: 800px;
    }

    .post-detail.reveal {
      opacity: 1;
      transform: translateY(0);
    }

    /* Only hide content initially if JavaScript is available */
    .post-detail:not(.reveal) {
      opacity: 0;
      transform: translateY(20px);
    }

    .post-nav {
      margin-bottom: 2rem;
      opacity: 0;
      transform: translateY(20px);
      animation: contentReveal 0.6s ease-out 0.2s forwards;
    }

    .back-button {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      background: var(--secondary-bg);
      border: 1px solid var(--border-color);
      color: var(--text-secondary);
      padding: 0.75rem 1rem;
      border-radius: 8px;
      font-size: 0.9rem;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
    }

    .back-button:hover {
      background: var(--accent-bg);
      border-color: var(--accent-bg);
      color: white;
      transform: translateX(-2px);
    }

    .post-header {
      margin-bottom: 2rem;
      opacity: 0;
      transform: translateY(30px);
      animation: contentReveal 0.8s ease-out 0.4s forwards;
    }

    .post-info {
      flex: 1;
    }

    .post-title {
      font-size: clamp(1.8rem, 5vw, 2.5rem);
      font-weight: 700;
      background: linear-gradient(135deg, var(--accent-bg), var(--glow-color));
      background-clip: text;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      margin-bottom: 0.5rem;
      line-height: 1.2;
    }

    .post-excerpt {
      font-size: 1.125rem;
      color: var(--text-secondary);
      line-height: 1.5;
      margin-bottom: 1rem;
    }

    .post-details {
      display: flex;
      gap: 1rem;
      flex-wrap: wrap;
      align-items: center;
    }

    .post-date {
      color: var(--text-secondary);
      font-size: 0.9rem;
      padding: 0.5rem 1rem;
      background: var(--secondary-bg);
      border-radius: 6px;
      border: 1px solid var(--border-color);
    }

    .post-tags-header {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .tag-badge {
      padding: 0.5rem 1rem;
      background: var(--primary-bg);
      color: var(--text-secondary);
      font-size: 0.85rem;
      border-radius: 6px;
      border: 1px solid var(--border-color);
      font-weight: 500;
      text-transform: lowercase;
    }

    .post-content {
      opacity: 0;
      transform: translateY(30px);
      animation: contentReveal 0.8s ease-out 0.6s forwards;
    }

    .content-wrapper {
      background: var(--secondary-bg);
      border: 1px solid var(--border-color);
      border-radius: 12px;
      padding: 2rem;
      line-height: 1.7;
    }

    /* Markdown content styling */
    .content-wrapper h1,
    .content-wrapper h2,
    .content-wrapper h3,
    .content-wrapper h4 {
      color: var(--text-primary);
      margin-top: 2rem;
      margin-bottom: 1rem;
      font-weight: 600;
    }

    .content-wrapper h1:first-child,
    .content-wrapper h2:first-child {
      margin-top: 0;
    }

    .content-wrapper h1 {
      font-size: 2rem;
      border-bottom: 2px solid var(--accent-bg);
      padding-bottom: 0.5rem;
    }

    .content-wrapper h2 {
      font-size: 1.5rem;
      color: var(--accent-bg);
    }

    .content-wrapper h3 {
      font-size: 1.25rem;
    }

    .content-wrapper p {
      color: var(--text-secondary);
      margin-bottom: 1.5rem;
      font-size: 1rem;
    }

    .content-wrapper ul,
    .content-wrapper ol {
      color: var(--text-secondary);
      margin-bottom: 1.5rem;
      padding-left: 2rem;
    }

    .content-wrapper li {
      margin-bottom: 0.75rem;
      line-height: 1.6;
    }

    .content-wrapper blockquote {
      border-left: 4px solid var(--accent-bg);
      background: rgba(59, 130, 246, 0.1);
      padding: 1rem 1.5rem;
      margin: 1.5rem 0;
      border-radius: 0 8px 8px 0;
      font-style: italic;
      color: var(--text-primary);
    }

    .content-wrapper code {
      background: var(--primary-bg);
      color: var(--accent-bg);
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
      font-size: 0.9em;
      font-family: "Fira Code", "Courier New", monospace;
    }

    .content-wrapper pre {
      background: var(--primary-bg);
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 1.5rem;
      overflow-x: auto;
      margin: 1.5rem 0;
    }

    .content-wrapper pre code {
      background: none;
      padding: 0;
      color: var(--text-secondary);
    }

    .content-wrapper img {
      max-width: 100%;
      height: auto;
      border-radius: 8px;
      margin: 1.5rem 0;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .content-wrapper a {
      color: var(--accent-bg);
      text-decoration: none;
      border-bottom: 1px solid transparent;
      transition: all 0.3s ease;
    }

    .content-wrapper a:hover {
      border-bottom-color: var(--accent-bg);
      color: var(--glow-color);
    }

    .content-wrapper table {
      width: 100%;
      border-collapse: collapse;
      margin: 1.5rem 0;
      background: var(--primary-bg);
      border-radius: 8px;
      overflow: hidden;
    }

    .content-wrapper th,
    .content-wrapper td {
      padding: 0.75rem 1rem;
      text-align: left;
      border-bottom: 1px solid var(--border-color);
      color: var(--text-secondary);
    }

    .content-wrapper th {
      background: var(--accent-bg);
      color: white;
      font-weight: 600;
    }

    .content-wrapper strong {
      color: var(--accent-bg);
      font-weight: 600;
    }

    .content-wrapper em {
      color: var(--text-primary);
      font-style: italic;
    }

    @keyframes contentReveal {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @media (max-width: 768px) {
      .post-meta {
        text-align: center;
      }

      .post-star.large {
        width: 56px;
        height: 56px;
        font-size: 20px;
        align-self: center;
      }

      .post-details {
        justify-content: center;
      }

      .content-wrapper {
        padding: 1.5rem;
      }

      .back-button {
        padding: 0.6rem 0.8rem;
        font-size: 0.85rem;
      }

      .content-wrapper h1 {
        font-size: 1.5rem;
      }

      .content-wrapper h2 {
        font-size: 1.25rem;
      }

      .content-wrapper pre {
        padding: 1rem;
        font-size: 0.85rem;
      }
    }
  </style>

  <script>
    // Reveal content after page load
    function revealContent() {
      const postDetail = document.getElementById("postDetail");
      if (postDetail && !postDetail.classList.contains("reveal")) {
        postDetail.classList.add("reveal");
      }
    }

    // Back button functionality
    function setupBackButton() {
      const backButton = document.getElementById("backButton");
      if (backButton) {
        backButton.addEventListener("click", () => {
          window.history.back();
        });
      }
    }

    function initializePostDetail() {
      revealContent();
      setupBackButton();
    }

    // Initialize immediately if DOM is ready
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", initializePostDetail);
    } else {
      initializePostDetail();
    }

    // Also initialize after navigation
    document.addEventListener("astro:after-swap", initializePostDetail);

    // Fallback reveal
    setTimeout(revealContent, 100);
  </script>
</Layout>
