---
import Layout from "../layouts/Layout.astro";
import StarExplosion from "../components/StarExplosion.astro";
import SearchBar from "../components/ui/SearchBar.astro";
import TagList from "../components/ui/TagList.astro";
import CyclingLogo from "../components/CyclingLogo.astro";
import SocialLinks from "../components/SocialLinks.astro";
import { getCollection } from "astro:content";

// Load posts from content collections and sort by date (newest first)
const posts = (await getCollection('posts')).sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);
---

<Layout title="Home">
  <StarExplosion />

  <div class="home-content" id="homeContent">
    <header class="hero">
      <div class="hero-header">
        <div class="title-row">
          <CyclingLogo />
          <h1 class="hero-title" id="heroTitle">Starlove's lil world</h1>
        </div>
        <div class="hero-content" id="heroContent">
          <div class="hero-text">
            <p>
              Welcome to my corner of webspace where I tinker with creative
              ideas and share thoughts on <strong>technology</strong>, <strong
                id="stuffWord"
                class="stuff-trigger">stuff</strong
              >, and <strong>life</strong>.
            </p>
            <p>
              I've been assisting various small businesses & nonprofit orgs,
              playing around with AI tools and blockchain games, thinking about
              optimistic solutions, dreaming of decentralized potentials,
              attending events and meeting people, learning piano and salsa,
              learning spanish and hindi, catsitting in NYC, exploring life,
              enjoying hobbies, making some arts, foolin around, healing my
              psyche, learning to lead, hoping for better, praying for peace //
            </p>
            <p>
              Here you'll find some of my oc, curated shares, project updates
              and reflections. Version 1.0 start small //
            </p>
            <p>—☆♡</p>
          </div>

          <SocialLinks />
        </div>

        <section class="posts-section">
          <SearchBar placeholder="Search posts..." id="searchInput" />

          <div class="posts-list" id="postsList">
            {
              posts.map((post) => (
                <article
                  class="post-item"
                  style={`--post-color: ${post.data.color}`}
                  data-tags={post.data.tags.join(", ").toLowerCase()}
                  data-title={post.data.title.toLowerCase()}
                  data-excerpt={post.data.excerpt.toLowerCase()}
                >
                  <a href={`/blog/${post.slug}`} class="post-link">
                    <div
                      class="post-star"
                      style={`background-color: ${post.data.color}`}
                    >
                      ★
                    </div>
                    <div class="post-content">
                      <h3 class="post-title">{post.data.title}</h3>
                      <p class="post-excerpt">{post.data.excerpt}</p>
                      <TagList tags={post.data.tags} />
                    </div>
                  </a>
                </article>
              ))
            }
          </div>
        </section>
      </div>
    </header>

    <!-- Stuff Tooltip -->
    <div class="stuff-tooltip" id="stuffTooltip">
      <img src="/1xlamp.webp" alt="Lamp" class="stuff-tooltip-image" />
    </div>

    <style>
      .home-content {
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.8s ease-out;
        padding-bottom: 6rem; /* Extra space for bottom navbar */
        padding-top: 0;
        margin-top: 0;
      }

      .home-content.reveal {
        opacity: 1;
        transform: translateY(0);
      }

      .hero {
        margin-bottom: 1.5rem;
        margin-top: 0;
        text-align: left;
        padding-top: 0;
      }

      .hero-header {
        margin-bottom: 1.5rem;
      }

      .title-row {
        display: flex;
        align-items: baseline;
        gap: 1.5rem;
        margin-bottom: 1rem;
      }


      .hero-title {
        font-size: clamp(2rem, 7vw, 3rem);
        font-weight: 700;
        background: linear-gradient(
          135deg,
          var(--accent-bg),
          var(--glow-color)
        );
        background-clip: text;
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin-bottom: 1rem;
        margin-top: auto;
        opacity: 0;
        transform: translateY(30px);
        animation: titleReveal 1s ease-out 0.5s forwards;
      }

      .hero-content {
        opacity: 0;
        transform: translateY(20px);
        animation: contentReveal 0.8s ease-out 1.2s forwards;
      }

      .hero-text {
        font-size: 1rem;
        line-height: 1.4;
        color: white;
        margin-bottom: 1rem;
        max-width: 600px;
      }

      .hero-text p {
        margin-bottom: 0.5rem;
      }

      .hero-text strong {
        color: var(--accent-bg);
        font-weight: 600;
      }

      .stuff-trigger {
        position: relative;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .stuff-trigger:hover {
        color: var(--glow-color);
        text-shadow: 0 0 8px rgba(96, 165, 250, 0.5);
      }

      .stuff-tooltip {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: var(--secondary-bg);
        border: 2px solid var(--accent-bg);
        border-radius: 12px;
        padding: 1rem;
        box-shadow:
          0 20px 40px rgba(0, 0, 0, 0.3),
          0 0 20px rgba(59, 130, 246, 0.2);
        z-index: 10000;
        opacity: 0;
        visibility: hidden;
        transform: translate(-50%, -50%) scale(0.8);
        transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
        max-width: 90vw;
        max-height: 90vh;
      }

      .stuff-tooltip.show {
        opacity: 1;
        visibility: visible;
        transform: translate(-50%, -50%) scale(1);
      }

      /* Mobile positioning - keep tooltip in upper viewport */
      @media (max-width: 768px) {
        .stuff-tooltip {
          top: 30%;
          max-width: 85vw;
        }
        
        .stuff-tooltip.show {
          transform: translate(-50%, -50%) scale(1);
        }
      }

      /* Small mobile screens - even higher */
      @media (max-width: 480px) {
        .stuff-tooltip {
          top: 25%;
          padding: 0.75rem;
        }
      }

      .stuff-tooltip-image {
        display: block;
        max-width: 300px;
        max-height: 300px;
        width: auto;
        height: auto;
        border-radius: 8px;
        border: 1px solid var(--border-color);
      }


      .posts-section {
        opacity: 0;
        transform: translateY(20px);
        animation: contentReveal 0.8s ease-out 1.5s forwards;
        margin-bottom: 1rem; /* Additional spacing before bottom padding */
      }

      .search-container {
        margin-bottom: 1rem;
      }

      .search-bar {
        position: relative;
        max-width: 600px;
      }

      .search-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-secondary);
        pointer-events: none;
        z-index: 1;
      }

      .search-input {
        width: 100%;
        padding: 0.75rem 1rem 0.75rem 3rem;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        background: var(--secondary-bg);
        color: var(--text-primary);
        font-size: 1rem;
        transition: all 0.3s ease;
      }

      .search-input:focus {
        outline: none;
        border-color: var(--accent-bg);
        box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
      }

      .search-input::placeholder {
        color: var(--text-secondary);
      }

      .posts-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
      }

      .post-item {
        transition: all 0.3s ease;
      }

      .post-link {
        width: 100%;
        display: flex;
        align-items: flex-start;
        gap: 0.75rem;
        padding: 1rem;
        background: linear-gradient(
          135deg,
          var(--secondary-bg) 0%,
          rgba(255, 255, 255, 0.02) 70%,
          transparent 100%
        );
        border-image: linear-gradient(
            135deg,
            var(--border-color) 0%,
            rgba(203, 213, 225, 0.3) 70%,
            transparent 100%
          )
          1;
        border-radius: 8px;
        transition: all 0.3s ease;
        cursor: pointer;
        position: relative;
        overflow: hidden;
        text-decoration: none;
        color: inherit;
      }

      .post-link:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        border-color: var(--accent-bg);
        background: linear-gradient(to right, var(--post-color), transparent);
      }

      [data-theme="dark"] .post-link {
        background: linear-gradient(
          135deg,
          var(--secondary-bg) 0%,
          rgba(0, 0, 0, 0.1) 70%,
          transparent 100%
        );
        border-image: linear-gradient(
            135deg,
            var(--border-color) 0%,
            rgba(51, 65, 85, 0.3) 70%,
            transparent 100%
          )
          1;
      }

      [data-theme="dark"] .post-link:hover {
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
      }

      .post-star {
        width: 24px;
        height: 24px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 12px;
        font-weight: bold;
        flex-shrink: 0;
        margin-top: 2px;
      }

      .post-content {
        flex: 1;
      }

      .post-title {
        font-size: 1.125rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.25rem;
        margin-top: 0;
        line-height: 1.2;
      }

      .post-excerpt {
        color: var(--text-secondary);
        line-height: 1.3;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
      }

      .post-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem;
      }

      .post-tag {
        padding: 0.25rem 0.5rem;
        background: var(--primary-bg);
        color: var(--text-secondary);
        font-size: 0.75rem;
        border-radius: 4px;
        border: 1px solid var(--border-color);
      }


      @keyframes titleReveal {
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      @keyframes contentReveal {
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      @media (max-width: 768px) {
        .hero {
          margin-bottom: 1rem;
        }

        .hero-header {
          margin-bottom: 1rem;
        }

        .title-row {
          gap: 0.75rem;
          margin-bottom: 0.75rem;
        }


        .hero-text {
          font-size: 0.9rem;
          line-height: 1.3;
        }


        .post-item {
          gap: 0.5rem;
        }

        .post-title {
          font-size: 1rem;
        }

        .post-star {
          width: 20px;
          height: 20px;
          font-size: 10px;
        }

        .search-bar {
          width: 78%;
          max-width: 600px;
        }

        .search-input {
          padding: 0.5rem 0.75rem 0.5rem 2.5rem;
          font-size: 0.875rem;
        }

        .search-icon {
          left: 0.75rem;
          width: 16px;
          height: 16px;
        }
      }
    </style>

    <script>
      // Handle star explosion completion
      document.addEventListener("starExplosionComplete", () => {
        const homeContent = document.getElementById("homeContent");
        const cyberBg = document.querySelector(".cyber-bg");
        const taskbar = document.querySelector(".taskbar");
        if (homeContent) {
          if (cyberBg) cyberBg.classList.add("loaded");
          if (homeContent) homeContent.classList.add("reveal");
          if (taskbar) taskbar.classList.add("reveal");
        }
      });

      // Check on page load if we should reveal immediately (for View Transitions)
      document.addEventListener("astro:page-load", () => {
        const hasPlayed = sessionStorage.getItem("starExplosionPlayed");
        if (hasPlayed) {
          // Reveal content immediately if animation already played
          const homeContent = document.getElementById("homeContent");
          const cyberBg = document.querySelector(".cyber-bg");
          const taskbar = document.querySelector(".taskbar");

          if (cyberBg && !cyberBg.classList.contains("loaded"))
            cyberBg.classList.add("loaded");
          if (homeContent && !homeContent.classList.contains("reveal"))
            homeContent.classList.add("reveal");
          if (taskbar && !taskbar.classList.contains("reveal"))
            taskbar.classList.add("reveal");
        }
      });

      // Fallback reveal in case event doesn't fire
      setTimeout(() => {
        const homeContent = document.getElementById("homeContent");
        const cyberBg = document.querySelector(".cyber-bg");
        const taskbar = document.querySelector(".taskbar");

        if (cyberBg && !cyberBg.classList.contains("loaded"))
          cyberBg.classList.add("loaded");
        if (homeContent && !homeContent.classList.contains("reveal"))
          homeContent.classList.add("reveal");
        if (taskbar && !taskbar.classList.contains("reveal"))
          taskbar.classList.add("reveal");
      }, 3000);


      // Simple search function that always re-queries elements
      function setupSearch() {
        const searchInput = document.getElementById("searchInput") as HTMLInputElement;
        const postsList = document.getElementById("postsList");
        
        if (!searchInput || !postsList) {
          console.log('Search elements not found, skipping setup');
          return;
        }

        console.log('Setting up search...');
        
        // Remove any existing listeners by cloning the input
        const newSearchInput = searchInput.cloneNode(true) as HTMLInputElement;
        searchInput.parentNode?.replaceChild(newSearchInput, searchInput);
        
        // Add the search listener
        newSearchInput.addEventListener("input", (e) => {
          const query = (e.target as HTMLInputElement).value.toLowerCase().trim();
          filterPosts(query);
        });
        
        console.log('Search setup complete');
      }

      function filterPosts(query: string) {
        console.log('Search query:', query);
        const allPosts = document.querySelectorAll(".post-item") as NodeListOf<HTMLElement>;
        let visibleCount = 0;
        
        allPosts.forEach((post) => {
          const title = post.getAttribute("data-title") || "";
          const excerpt = post.getAttribute("data-excerpt") || "";
          const tags = post.getAttribute("data-tags") || "";

          const matches =
            title.includes(query) ||
            excerpt.includes(query) ||
            tags.includes(query);

          const shouldShow = matches || query === "";
          post.style.display = shouldShow ? "flex" : "none";
          
          if (shouldShow) visibleCount++;
        });
        
        console.log(`Showing ${visibleCount} out of ${allPosts.length} posts`);
      }

      // Initialize search
      document.addEventListener("DOMContentLoaded", setupSearch);
      document.addEventListener("astro:after-swap", () => setTimeout(setupSearch, 100));
      document.addEventListener("astro:page-load", () => setTimeout(setupSearch, 100));

      // Stuff tooltip functionality
      class StuffTooltip {
        private stuffWord: HTMLElement | null;
        private tooltip: HTMLElement | null;
        private isShowing: boolean;
        private cooldownTimer: ReturnType<typeof setTimeout> | null;
        private isOnCooldown: boolean;

        constructor() {
          this.stuffWord = document.getElementById("stuffWord");
          this.tooltip = document.getElementById("stuffTooltip");
          this.isShowing = false;
          this.cooldownTimer = null;
          this.isOnCooldown = false;
          this.init();
        }

        init() {
          if (!this.stuffWord || !this.tooltip) return;

          this.stuffWord.addEventListener("click", () => this.showTooltip());
          this.tooltip.addEventListener("click", () => this.hideTooltip());
        }

        showTooltip() {
          if (this.isShowing || this.isOnCooldown) return;

          this.isShowing = true;
          this.tooltip.classList.add("show");

          // Auto-hide after 6 seconds
          setTimeout(() => {
            if (this.isShowing) {
              this.hideTooltip();
            }
          }, 6000);
        }

        hideTooltip() {
          if (!this.isShowing) return;

          this.isShowing = false;
          this.tooltip.classList.remove("show");

          // Start 10-second cooldown before allowing next click
          this.isOnCooldown = true;
          this.cooldownTimer = setTimeout(() => {
            this.isOnCooldown = false;
          }, 10000);
        }
      }

      // Initialize stuff tooltip
      document.addEventListener("DOMContentLoaded", () => {
        new StuffTooltip();
      });

      // Reinitialize after navigation
      document.addEventListener("astro:after-swap", () => {
        new StuffTooltip();
      });
    </script>
  </div></Layout
>
