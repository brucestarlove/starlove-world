---
import Layout from "../layouts/Layout.astro";
import StarExplosion from "../components/StarExplosion.astro";
import SearchBar from "../components/ui/SearchBar.astro";
import TagList from "../components/ui/TagList.astro";
import CyclingLogo from "../components/CyclingLogo.astro";
import SocialLinks from "../components/SocialLinks.astro";
import "../styles/pages/home.css";
import { getCollection } from "astro:content";

// Load posts from content collections and sort by date (newest first)
const posts = (await getCollection('posts')).sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);
---

<Layout title="Home">
  <StarExplosion />

  <div class="home-content" id="homeContent">
    <header class="hero">
      <div class="hero-header">
        <div class="title-row">
          <CyclingLogo />
          <h1 class="hero-title" id="heroTitle">Starlove's lil world</h1>
        </div>
        <div class="hero-content" id="heroContent">
          <div class="hero-text">
            <p>
              Welcome to my corner of webspace where I tinker with creative
              ideas and share thoughts on <strong>technology</strong>, <strong
                id="stuffWord"
                class="stuff-trigger">stuff</strong
              >, and <strong>life</strong>.
            </p>
            <p>
              Here you'll find some of my oc, curated shares, project updates
              and reflections. Version 1.0 start small //
            </p>
          </div>

          <SocialLinks />
        </div>

        <section class="posts-section">
          <SearchBar placeholder="Search posts..." id="searchInput" />

          <div class="posts-list" id="postsList">
            {
              posts.map((post) => (
                <article
                  class="post-item"
                  style={`--post-color: ${post.data.color}`}
                  data-tags={post.data.tags.join(", ").toLowerCase()}
                  data-title={post.data.title.toLowerCase()}
                  data-excerpt={post.data.excerpt.toLowerCase()}
                >
                  <a href={`/blog/${post.slug}`} class="post-link">
                    <div
                      class="item-star"
                      style={`background-color: ${post.data.color}`}
                    >
                      â˜…
                    </div>
                    <div class="item-content">
                      <h3 class="item-title">{post.data.title}</h3>
                      <p class="item-description">{post.data.excerpt}</p>
                      <TagList tags={post.data.tags} />
                    </div>
                  </a>
                </article>
              ))
            }
          </div>
        </section>
      </div>
    </header>

    <!-- Stuff Tooltip -->
    <div class="stuff-tooltip" id="stuffTooltip">
      <img src="/1xlamp.webp" alt="Lamp" class="stuff-tooltip-image" />
    </div>


    <script>
      // Handle star explosion completion
      document.addEventListener("starExplosionComplete", () => {
        const homeContent = document.getElementById("homeContent");
        const cyberBg = document.querySelector(".cyber-bg");
        const taskbar = document.querySelector(".taskbar");
        if (homeContent) {
          if (cyberBg) cyberBg.classList.add("loaded");
          if (homeContent) homeContent.classList.add("reveal");
          if (taskbar) taskbar.classList.add("reveal");
        }
      });

      // Check on page load if we should reveal immediately (for View Transitions)
      document.addEventListener("astro:page-load", () => {
        const hasPlayed = sessionStorage.getItem("starExplosionPlayed");
        if (hasPlayed) {
          // Reveal content immediately if animation already played
          const homeContent = document.getElementById("homeContent");
          const cyberBg = document.querySelector(".cyber-bg");
          const taskbar = document.querySelector(".taskbar");

          if (cyberBg && !cyberBg.classList.contains("loaded"))
            cyberBg.classList.add("loaded");
          if (homeContent && !homeContent.classList.contains("reveal"))
            homeContent.classList.add("reveal");
          if (taskbar && !taskbar.classList.contains("reveal"))
            taskbar.classList.add("reveal");
        }
      });

      // Fallback reveal in case event doesn't fire
      setTimeout(() => {
        const homeContent = document.getElementById("homeContent");
        const cyberBg = document.querySelector(".cyber-bg");
        const taskbar = document.querySelector(".taskbar");

        if (cyberBg && !cyberBg.classList.contains("loaded"))
          cyberBg.classList.add("loaded");
        if (homeContent && !homeContent.classList.contains("reveal"))
          homeContent.classList.add("reveal");
        if (taskbar && !taskbar.classList.contains("reveal"))
          taskbar.classList.add("reveal");
      }, 3000);


      // Simple search function that always re-queries elements
      function setupSearch() {
        const searchInput = document.getElementById("searchInput") as HTMLInputElement;
        const postsList = document.getElementById("postsList");
        
        if (!searchInput || !postsList) {
          console.log('Search elements not found, skipping setup');
          return;
        }

        console.log('Setting up search...');
        
        // Remove any existing listeners by cloning the input
        const newSearchInput = searchInput.cloneNode(true) as HTMLInputElement;
        searchInput.parentNode?.replaceChild(newSearchInput, searchInput);
        
        // Add the search listener
        newSearchInput.addEventListener("input", (e) => {
          const query = (e.target as HTMLInputElement).value.toLowerCase().trim();
          filterPosts(query);
        });
        
        console.log('Search setup complete');
      }

      function filterPosts(query: string) {
        console.log('Search query:', query);
        const allPosts = document.querySelectorAll(".post-item") as NodeListOf<HTMLElement>;
        let visibleCount = 0;
        
        allPosts.forEach((post) => {
          const title = post.getAttribute("data-title") || "";
          const excerpt = post.getAttribute("data-excerpt") || "";
          const tags = post.getAttribute("data-tags") || "";

          const matches =
            title.includes(query) ||
            excerpt.includes(query) ||
            tags.includes(query);

          const shouldShow = matches || query === "";
          post.style.display = shouldShow ? "flex" : "none";
          
          if (shouldShow) visibleCount++;
        });
        
        console.log(`Showing ${visibleCount} out of ${allPosts.length} posts`);
      }

      // Initialize search
      document.addEventListener("DOMContentLoaded", setupSearch);
      document.addEventListener("astro:after-swap", () => setTimeout(setupSearch, 100));
      document.addEventListener("astro:page-load", () => setTimeout(setupSearch, 100));

      // Stuff tooltip functionality
      class StuffTooltip {
        private stuffWord: HTMLElement | null;
        private tooltip: HTMLElement | null;
        private isShowing: boolean;
        private cooldownTimer: ReturnType<typeof setTimeout> | null;
        private isOnCooldown: boolean;

        constructor() {
          this.stuffWord = document.getElementById("stuffWord");
          this.tooltip = document.getElementById("stuffTooltip");
          this.isShowing = false;
          this.cooldownTimer = null;
          this.isOnCooldown = false;
          this.init();
        }

        init() {
          if (!this.stuffWord || !this.tooltip) return;

          this.stuffWord.addEventListener("click", () => this.showTooltip());
          this.tooltip.addEventListener("click", () => this.hideTooltip());
        }

        showTooltip() {
          if (this.isShowing || this.isOnCooldown) return;

          this.isShowing = true;
          this.tooltip.classList.add("show");

          // Auto-hide after 6 seconds
          setTimeout(() => {
            if (this.isShowing) {
              this.hideTooltip();
            }
          }, 6000);
        }

        hideTooltip() {
          if (!this.isShowing) return;

          this.isShowing = false;
          this.tooltip.classList.remove("show");

          // Start 10-second cooldown before allowing next click
          this.isOnCooldown = true;
          this.cooldownTimer = setTimeout(() => {
            this.isOnCooldown = false;
          }, 10000);
        }
      }

      // Initialize stuff tooltip
      document.addEventListener("DOMContentLoaded", () => {
        new StuffTooltip();
      });

      // Reinitialize after navigation
      document.addEventListener("astro:after-swap", () => {
        new StuffTooltip();
      });
    </script>
  </div></Layout
>
