---
import { ClientRouter } from "astro:transitions";
import StarscapeSimpleAudioPlayer from "../components/StarscapeSimpleAudioPlayer.astro";

// Import shared styles
import "../styles/global.css";
import "../styles/components.css";
import "../styles/utilities.css";

export interface Props {
  title: string;
}

const { title } = Astro.props;

// Define playlists for the audio player
const audioPlaylists = {
  Home: [
    {
      title: "Tranquility.mid",
      src: "/audio/playlist-home/Tranquility.mp3",
      artist: "Ambient",
      duration: "2:40",
    },
    {
      title: "MidnightExpress.mid",
      src: "/audio/playlist-home/MidnightExpress.mp3",
      artist: "Ambient",
      duration: "3:41",
    },
    {
      title: "AcrossTheUniverse.mid",
      src: "/audio/playlist-home/AcrossTheUniverse.mp3",
      artist: "Ambient",
      duration: "3:18",
    },
    {
      title: "loop-water-waves.wav",
      src: "/audio/playlist-home/loop-water-waves.wav",
      artist: "Ambient",
      duration: "3:42",
    },
  ],
  First: [
    {
      title: "lavitz-harpoon.wave",
      src: "/audio/playlist-first/Lavitz_Harpoon_Full.mp3",
      artist: "Lavitz",
      duration: "4:15",
    },
    {
      title: "Molecules",
      src: "/audio/playlist-first/Molecules_KristoffKrane+Sadistik-compressed.mp3",
      artist: "Kristoff Krane + Sadistik",
      duration: "3:28",
    },
    {
      title: "hit_-_with_1",
      src: "/audio/playlist-first/hit_-_with_1.mp3",
      artist: "Unknown",
      duration: "2:45",
    },
    {
      title: "A Wake",
      src: "/audio/playlist-first/Eyedea_ft._Slug_-_A_Wake_(192_kbps)-compressed.mp3",
      artist: "Eyedea ft. Slug",
      duration: "4:12",
    },
  ],
};
---

<!doctype html>
<html lang="en" data-theme="light">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Bruce Starlove - Personal Website" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <ClientRouter />
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.4/howler.min.js"
    ></script>
  </head>
  <body>
    <div class="cyber-bg"></div>
    <main class="main-content">
      <slot />
    </main>
    <div class="taskbar" transition:persist>
      <div class="taskbar-content">
        <div class="taskbar-left">
          <button class="logo-button" id="logoButton">
            <div class="star-logo">
              <!-- <svg viewBox="0 0 24 24" width="24" height="24">
                <path
                  d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
                  fill="currentColor"></path>
              </svg> -->
              <img
                class="logo-item active"
                src="/Starscape-Star.webp"
                alt="Logo"
                width="38"
                height="38"
              />
            </div>
          </button>
          <div class="page-name" id="pageName">Home</div>
          <div class="radial-menu" id="radialMenu">
            <a href="/" class="radial-item" data-angle="225">
              <span class="radial-label">Home</span>
            </a>
            <a href="/projects" class="radial-item" data-angle="270">
              <span class="radial-label">Projects</span>
            </a>
            <a href="/art" class="radial-item" data-angle="315">
              <span class="radial-label">Art</span>
            </a>
            <a href="/about" class="radial-item" data-angle="0">
              <span class="radial-label">About</span>
            </a>
          </div>
        </div>
        <div class="taskbar-center">
          <StarscapeSimpleAudioPlayer 
            id="taskbar-audio-player" 
            playlists={audioPlaylists}
          />
        </div>
        <div class="taskbar-right">
          <button class="theme-toggle" id="themeToggle">
            <span class="theme-icon cityscape-icon">üè¢</span>
            <span class="theme-icon forestscape-icon">üå≤</span>
            <span class="theme-icon starscape-icon">‚ú®</span>
          </button>
        </div>
      </div>
    </div>
  </body>
</html>

<style>
  :root {
    --primary-bg: #0f172a;
    --secondary-bg: #1e293b;
    --accent-bg: #3b82f6;
    --text-primary: #f1f5f9;
    --text-secondary: #e1e1e1;
    --border-color: #334155;
    --glow-color: #60a5fa;
    --taskbar-bg: rgba(15, 23, 42, 0.95);
    --taskbar-border: #1e293b;
  }

  [data-theme="cityscape"] {
    --primary-bg: #0f172a;
    --secondary-bg: #1e293b;
    --accent-bg: #fbbf24;
    --text-primary: #f1f5f9;
    --text-secondary: #e1e1e1;
    --border-color: #334155;
    --glow-color: #fcd34d;
    --taskbar-bg: rgba(15, 23, 42, 0.95);
    --taskbar-border: #1e293b;
  }

  [data-theme="forestscape"] {
    --primary-bg: #0f172a;
    --secondary-bg: #1e293b;
    --accent-bg: #22c55e;
    --text-primary: #f1f5f9;
    --text-secondary: #e1e1e1;
    --border-color: #334155;
    --glow-color: #4ade80;
    --taskbar-bg: rgba(15, 23, 42, 0.95);
    --taskbar-border: #1e293b;
  }

  [data-theme="starscape"] {
    --primary-bg: #0f172a;
    --secondary-bg: #1e293b;
    --accent-bg: #3b82f6;
    --text-primary: #f1f5f9;
    --text-secondary: #e1e1e1;
    --border-color: #334155;
    --glow-color: #60a5fa;
    --taskbar-bg: rgba(15, 23, 42, 0.95);
    --taskbar-border: #1e293b;
  }

  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  html {
    font-family: system-ui, sans-serif;
    background: var(--primary-bg);
    color: var(--text-primary);
    overflow-x: hidden;
    scroll-behavior: smooth;
  }

  body {
    min-height: 100vh;
    position: relative;
    padding-bottom: 60px;
    margin: 0;
    padding-top: 0;
    padding-left: 2rem;
    padding-right: 2rem;
  }

  .cyber-bg {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url("/bg/cityscape01.webp");
    background-repeat: no-repeat;
    background-position: bottom center;
    background-size: cover;
    pointer-events: none;
    z-index: -1;
    opacity: 0;
    transition: opacity 0.8s ease-out;
  }

  .cyber-bg.loaded {
    opacity: 1;
  }

  [data-theme="forestscape"] .cyber-bg {
    background-image: url("/bg/forestscape01.webp");
  }

  [data-theme="starscape"] .cyber-bg {
    background-image: url("/bg/starscape01.webp");
  }

  /* [data-theme="dark"] .cyber-bg {
    background: radial-gradient(
        circle at 20% 80%,
        rgba(59, 130, 246, 0.2) 0%,
        transparent 50%
      ),
      radial-gradient(
        circle at 80% 20%,
        rgba(96, 165, 250, 0.2) 0%,
        transparent 50%
      ),
      linear-gradient(
        135deg,
        transparent 0%,
        rgba(59, 130, 246, 0.1) 50%,
        transparent 100%
      );
  } */

  .main-content {
    padding: 1rem;
    max-width: 800px;
    min-height: calc(100vh - 60px);
    position: relative;
  }

  .taskbar {
    position: fixed;
    bottom: 0;
    height: 60px;
    background: var(--taskbar-bg);
    border-top: 1px solid var(--taskbar-border);
    display: flex;
    align-items: center;
    justify-content: start;
    width: 100%;
    max-width: 800px;
    padding: 0;
    backdrop-filter: blur(10px);
    z-index: 1000;
    opacity: 0;
    transform: translateY(10px);
    transition: all 0.8s ease-out;
  }

  .taskbar.reveal {
    opacity: 1;
    transform: translateY(0);
  }

  .taskbar-content {
    width: 100%;
    max-width: 800px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 1rem;
  }

  .taskbar-left,
  .taskbar-right {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .taskbar-center {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0 1rem;
  }

  .logo-button {
    width: 40px;
    height: 40px;
    border: none;
    background: var(--accent-bg);
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    color: white;
    position: relative;
    z-index: 1001;
  }

  .logo-button:hover {
    background: var(--glow-color);
    box-shadow: 0 0 20px rgba(96, 165, 250, 0.5);
  }

  .star-logo {
    transition: transform 0.3s ease;
  }

  .logo-button.active .star-logo {
    transform: rotate(180deg);
  }

  .page-name {
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--accent-bg);
    transition: all 0.3s ease;
  }

  .radial-menu {
    position: fixed;
    bottom: 60px;
    left: 1rem;
    width: 80px;
    height: 80px;
    pointer-events: none;
    z-index: 999;
  }

  .radial-item {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 60px;
    height: 60px;
    background: var(--secondary-bg);
    border: 2px solid var(--border-color);
    border-radius: 50%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    color: var(--text-primary);
    transform: translate(-50%, -50%) scale(0) rotate(0deg);
    opacity: 0;
    transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    pointer-events: none;
    backdrop-filter: blur(10px);
    box-shadow:
      0 8px 32px rgba(0, 0, 0, 0.3),
      0 0 0 1px rgba(255, 255, 255, 0.05);
  }

  .radial-menu.active .radial-item {
    pointer-events: auto;
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }

  .radial-menu.active .radial-item:nth-child(1) {
    transform: translate(-50%, -50%) scale(1) translate(-20px, -50px);
    transition-delay: 0.1s;
  }

  .radial-menu.active .radial-item:nth-child(2) {
    transform: translate(-50%, -50%) scale(1) translate(50px, -50px);
    transition-delay: 0.15s;
  }

  .radial-menu.active .radial-item:nth-child(3) {
    transform: translate(-50%, -50%) scale(1) translate(110px, -10px);
    transition-delay: 0.2s;
  }

  .radial-menu.active .radial-item:nth-child(4) {
    transform: translate(-50%, -50%) scale(1) translate(104px, 60px);
    transition-delay: 0.25s;
  }

  .radial-item:hover {
    background: var(--accent-bg);
    border-color: var(--glow-color);
    transform: translate(-50%, -50%) scale(1);
    box-shadow:
      0 12px 40px rgba(0, 0, 0, 0.4),
      0 0 20px var(--glow-color);
  }

  .radial-menu.active .radial-item:nth-child(1):hover {
    transform: translate(-50%, -50%) scale(1.05) translate(-20px, -50px);
  }

  .radial-menu.active .radial-item:nth-child(2):hover {
    transform: translate(-50%, -50%) scale(1.05) translate(50px, -50px);
  }

  .radial-menu.active .radial-item:nth-child(3):hover {
    transform: translate(-50%, -50%) scale(1.05) translate(110px, -10px);
  }

  .radial-menu.active .radial-item:nth-child(4):hover {
    transform: translate(-50%, -50%) scale(1.05) translate(104px, 60px);
  }

  .radial-label {
    font-size: 0.75rem;
    font-weight: 600;
    text-align: center;
    white-space: nowrap;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
    letter-spacing: 0.5px;
  }

  .window-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--secondary-bg);
    padding: 0.5rem 1rem;
    border-radius: 6px;
    border: 1px solid var(--border-color);
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  .app-icon {
    color: var(--accent-bg);
    font-size: 0.875rem;
  }

  .app-name {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--text-secondary);
  }

  .theme-toggle {
    width: 40px;
    height: 40px;
    border: none;
    background: var(--secondary-bg);
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    border: 1px solid var(--border-color);
    position: relative;
  }

  .theme-toggle:hover {
    background: var(--accent-bg);
    color: white;
  }

  .theme-icon {
    position: absolute;
    transition: all 0.3s ease;
    opacity: 0;
    transform: rotate(180deg);
  }

  [data-theme="cityscape"] .cityscape-icon,
  [data-theme="forestscape"] .forestscape-icon,
  [data-theme="starscape"] .starscape-icon {
    opacity: 1;
    transform: rotate(0deg);
  }

  .player-btn {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
  }

  .player-btn:hover {
    background: var(--accent-bg);
    color: white;
  }

  .play-pause-btn {
    background: var(--accent-bg);
    color: white;
    padding: 0.5rem;
    border-radius: 6px;
  }

  .play-pause-btn:hover {
    background: var(--glow-color);
  }

  .track-info {
    flex: 1;
    min-width: 0;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .track-title {
    font-size: 0.8rem;
    font-weight: 500;
    color: var(--text-primary);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .progress-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .time-current,
  .time-total {
    font-size: 0.7rem;
    color: var(--text-secondary);
    font-variant-numeric: tabular-nums;
    flex-shrink: 0;
  }

  .progress-bar {
    flex: 1;
    height: 4px;
    background: var(--border-color);
    border-radius: 2px;
    position: relative;
    cursor: pointer;
    min-width: 60px;
  }

  .progress-fill {
    height: 100%;
    background: var(--accent-bg);
    border-radius: 2px;
    width: 0%;
    transition: width 0.1s ease;
  }

  .progress-handle {
    position: absolute;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 12px;
    height: 12px;
    background: var(--accent-bg);
    border: 2px solid white;
    border-radius: 50%;
    cursor: grab;
    opacity: 0;
    transition: opacity 0.2s ease;
    left: 0%;
  }

  .progress-bar:hover .progress-handle {
    opacity: 1;
  }

  .progress-handle:active {
    cursor: grabbing;
    transform: translate(-50%, -50%) scale(1.2);
  }

  /* Volume Control Styles */
  .volume-control {
    position: relative;
    display: flex;
    align-items: center;
    flex-shrink: 0;
  }

  .volume-btn {
    position: relative;
  }

  .volume-tooltip {
    position: absolute;
    bottom: calc(100% + 10px);
    left: 50%;
    transform: translateX(-50%);
    background: var(--secondary-bg);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 0.75rem;
    opacity: 0;
    visibility: hidden;
    transition: all 0.2s ease;
    z-index: 1000;
    min-width: 120px;
  }

  .volume-tooltip::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 5px solid transparent;
    border-top-color: var(--border-color);
  }

  .volume-tooltip::before {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 4px solid transparent;
    border-top-color: var(--secondary-bg);
    z-index: 1;
  }

  .volume-control:hover .volume-tooltip {
    opacity: 1;
    visibility: visible;
  }

  .volume-slider-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
  }

  .volume-slider {
    width: 80px;
    height: 4px;
    background: var(--border-color);
    border-radius: 2px;
    position: relative;
    cursor: pointer;
  }

  .volume-fill {
    height: 100%;
    background: var(--accent-bg);
    border-radius: 2px;
    width: 100%;
    transition: width 0.1s ease;
  }

  .volume-handle {
    position: absolute;
    top: 50%;
    transform: translate(-50%, -50%);
    width: 12px;
    height: 12px;
    background: var(--accent-bg);
    border: 2px solid white;
    border-radius: 50%;
    cursor: grab;
    left: 100%;
  }

  .volume-handle:active {
    cursor: grabbing;
    transform: translate(-50%, -50%) scale(1.2);
  }

  .volume-percentage {
    font-size: 0.7rem;
    color: var(--text-secondary);
    font-variant-numeric: tabular-nums;
  }

  @media (max-width: 768px) {
    .main-content {
      padding: 0.75rem;
    }

    .taskbar {
      left: 0;
      right: 0;
      transform: none;
      width: 100vw;
      max-width: none;
      padding: 0 0.5rem;
    }

    .taskbar-content {
      padding: 0 0.5rem;
      max-width: none;
    }

    .window-title {
      padding: 0.25rem 0.5rem;
      font-size: 0.875rem;
    }

    .app-name {
      font-size: 0.75rem;
    }

    .logo-button {
      width: 36px;
      height: 36px;
    }

    .page-name {
      display: none;
    }

    .theme-toggle {
      width: 36px;
      height: 36px;
      padding: 8px;
    }

    .radial-menu {
      left: 0.5rem;
    }

    .radial-item {
      width: 50px;
      height: 50px;
    }

    .radial-menu.active .radial-item:nth-child(1) {
      transform: translate(-50%, -50%) scale(1) translate(-15px, -35px);
    }

    .radial-menu.active .radial-item:nth-child(2) {
      transform: translate(-50%, -50%) scale(1) translate(40px, -35px);
    }

    .radial-menu.active .radial-item:nth-child(3) {
      transform: translate(-50%, -50%) scale(1) translate(70px, 10px);
    }

    .radial-menu.active .radial-item:nth-child(4) {
      transform: translate(-50%, -50%) scale(1) translate(70px, 65px);
    }

    .radial-menu.active .radial-item:nth-child(1):hover {
      transform: translate(-50%, -50%) scale(1.05) translate(-15px, -35px);
    }

    .radial-menu.active .radial-item:nth-child(2):hover {
      transform: translate(-50%, -50%) scale(1.05) translate(40px, -35px);
    }

    .radial-menu.active .radial-item:nth-child(3):hover {
      transform: translate(-50%, -50%) scale(1.05) translate(70px, 10px);
    }

    .radial-menu.active .radial-item:nth-child(4):hover {
      transform: translate(-50%, -50%) scale(1.05) translate(70px, 65px);
    }

    .radial-label {
      font-size: 0.65rem;
    }

    .audio-player {
      gap: 0.5rem;
      padding: 0.4rem 0.6rem;
      max-width: 300px;
    }

    .track-title {
      font-size: 0.75rem;
    }

    .time-current,
    .time-total {
      font-size: 0.65rem;
    }

    .progress-bar {
      min-width: 40px;
    }
  }

  @media (max-width: 480px) {
    .taskbar-content {
      padding: 0 0.25rem;
    }

    .taskbar {
      padding: 0 0.25rem;
    }

    .window-title {
      padding: 0.25rem 0.5rem;
      font-size: 0.8rem;
    }

    .app-name {
      font-size: 0.7rem;
    }

    .logo-button,
    .theme-toggle {
      width: 32px;
      height: 32px;
    }

    .page-name {
      font-size: 0.75rem;
      padding: 0.15rem 0.4rem;
      margin-left: 0.25rem;
    }

    .radial-menu {
      left: 0.25rem;
    }

    .radial-item {
      width: 45px;
      height: 45px;
    }

    .radial-menu.active .radial-item:nth-child(1) {
      transform: translate(-50%, -50%) scale(1) translate(-18px, -35px);
    }

    .radial-menu.active .radial-item:nth-child(2) {
      transform: translate(-50%, -50%) scale(1) translate(28px, -33px);
    }

    .radial-menu.active .radial-item:nth-child(3) {
      transform: translate(-50%, -50%) scale(1) translate(55px, 7px);
    }

    .radial-menu.active .radial-item:nth-child(4) {
      transform: translate(-50%, -50%) scale(1) translate(54px, 55px);
    }

    .radial-menu.active .radial-item:nth-child(1):hover {
      transform: translate(-50%, -50%) scale(1.05) translate(-18px, -35px);
    }

    .radial-menu.active .radial-item:nth-child(2):hover {
      transform: translate(-50%, -50%) scale(1.05) translate(28px, -33px);
    }

    .radial-menu.active .radial-item:nth-child(3):hover {
      transform: translate(-50%, -50%) scale(1.05) translate(55px, 7px);
    }

    .radial-menu.active .radial-item:nth-child(4):hover {
      transform: translate(-50%, -50%) scale(1.05) translate(54px, 55px);
    }

    .radial-label {
      font-size: 0.6rem;
    }

    .audio-player {
      gap: 0.4rem;
      padding: 0.3rem 0.5rem;
      max-width: 250px;
    }

    .track-title {
      font-size: 0.7rem;
    }

    .time-current,
    .time-total {
      font-size: 0.6rem;
    }
  }
</style>

<script>
  // Type declarations for external dependencies
  declare var Howl: any;
  declare global {
    interface Window {
      audioPlayerSingleton?: AudioPlayerManager;
    }
  }
  // Theme toggle functionality
  const themes = ["cityscape", "forestscape", "starscape"];

  const setTheme = (theme: string) => {
    document.documentElement.setAttribute("data-theme", theme);
    localStorage.setItem("theme", theme);
  };

  const getTheme = () => {
    const saved = localStorage.getItem("theme");
    if (saved && themes.includes(saved)) {
      return saved;
    }
    return "cityscape"; // Default theme
  };

  // Store event handlers globally to allow proper cleanup
  let logoClickHandler: (() => void) | null = null;
  let overlayClickHandler: ((e: Event) => void) | null = null;
  let themeClickHandler: (() => void) | null = null;

  // Update page name based on current route
  function updatePageName() {
    const pageName = document.getElementById("pageName");
    if (!pageName) return;

    const path = window.location.pathname;
    let name = "Home";

    const pathNames: Record<string, string> = {
      art: "Art",
      projects: "Projects",
      blog: "Blog",
      about: "About",
    };

    if (path === "/") {
      name = "Home";
    } else {
      // regex to avoid long else/if chains... maybe i'll regret this
      const match = path.match(/^\/([^/]+)/);
      const segment = match ? match[1] : "";
      name =
        pathNames[segment] ||
        (segment
          ? segment.charAt(0).toUpperCase() + segment.slice(1)
          : "Unknown");
    }

    pageName.textContent = name;
  }

  // Global scroll-to-top utility
  function scrollToTop() {
    window.scrollTo(0, 0);
    document.documentElement.scrollTop = 0;
    document.body.scrollTop = 0;
  }

  function initializeApp() {
    const logoButton = document.getElementById("logoButton");
    const radialMenu = document.getElementById("radialMenu");
    const themeToggle = document.getElementById("themeToggle");

    // Remove existing event listeners to prevent duplicates
    if (logoClickHandler) {
      logoButton?.removeEventListener("click", logoClickHandler);
    }
    if (overlayClickHandler) {
      document?.removeEventListener("click", overlayClickHandler);
    }
    if (themeClickHandler) {
      themeToggle?.removeEventListener("click", themeClickHandler);
    }

    // Menu toggle functionality
    logoClickHandler = () => {
      logoButton?.classList.toggle("active");
      radialMenu?.classList.toggle("active");
    };

    // Close menu when clicking outside
    overlayClickHandler = (e: Event) => {
      const target = e.target as Element;
      if (!logoButton?.contains(target) && !radialMenu?.contains(target)) {
        logoButton?.classList.remove("active");
        radialMenu?.classList.remove("active");
      }
    };

    themeClickHandler = () => {
      const currentTheme =
        document.documentElement.getAttribute("data-theme") || "cityscape";
      const currentIndex = themes.indexOf(currentTheme);
      const nextIndex = (currentIndex + 1) % themes.length;
      const newTheme = themes[nextIndex];
      setTheme(newTheme);
    };

    logoButton?.addEventListener("click", logoClickHandler);
    document?.addEventListener("click", overlayClickHandler);
    themeToggle?.addEventListener("click", themeClickHandler);

    // Close menu when clicking radial items
    const radialItems = document.querySelectorAll(".radial-item");
    radialItems.forEach((item) => {
      item.addEventListener("click", () => {
        logoButton?.classList.remove("active");
        radialMenu?.classList.remove("active");
      });
    });

    // Initialize theme
    setTheme(getTheme());

    // Update page name
    updatePageName();

    // Execute scroll to top
    scrollToTop();

    // Only reveal immediately if star explosion already played
    const hasPlayed = sessionStorage.getItem("starExplosionPlayed");
    if (hasPlayed) {
      // Load background with content reveal
      const cyberBg = document.querySelector(".cyber-bg");
      if (cyberBg && !cyberBg.classList.contains("loaded")) {
        cyberBg.classList.add("loaded");
      }

      // Reveal taskbar
      const taskbar = document.querySelector(".taskbar");
      if (taskbar && !taskbar.classList.contains("reveal")) {
        taskbar.classList.add("reveal");
      }
    }
  }

  // Initialize on page load
  document.addEventListener("DOMContentLoaded", initializeApp);

  // Reinitialize after client-side navigation
  document.addEventListener("astro:after-swap", initializeApp);

  // Handle starExplosion event
  document.addEventListener("starExplosionComplete", () => {
    const cyberBg = document.querySelector(".cyber-bg");
    const taskbar = document.querySelector(".taskbar");

    if (cyberBg) {
      cyberBg.classList.add("loaded");
    }
    if (taskbar) {
      taskbar.classList.add("reveal");
    }
  });

  // Fallback background loading
  setTimeout(() => {
    const cyberBg = document.querySelector(".cyber-bg");
    const taskbar = document.querySelector(".taskbar");

    if (cyberBg && !cyberBg.classList.contains("loaded")) {
      cyberBg.classList.add("loaded");
    }
    if (taskbar && !taskbar.classList.contains("reveal")) {
      taskbar.classList.add("reveal");
    }
  }, 3000);

  // Audio Player Implementation
  class AudioPlayerManager {
    currentSound: any;
    playlists: {
      [key: string]: {
        title: string;
        src: string;
        artist?: string;
        duration?: string;
      }[];
    };
    currentPlaylist: string;
    currentTrackIndex: number;
    isPlaying: boolean;
    isDragging: boolean;
    duration: number;
    playPauseBtn!: HTMLElement | null;
    prevBtn!: HTMLElement | null;
    nextBtn!: HTMLElement | null;
    trackTitle!: HTMLElement | null;
    timeCurrent!: HTMLElement | null;
    timeTotal!: HTMLElement | null;
    progressBar!: HTMLElement | null;
    progressFill!: HTMLElement | null;
    progressHandle!: HTMLElement | null;
    playIcon!: SVGElement | null;
    pauseIcon!: SVGElement | null;
    volumeBtn!: HTMLElement | null;
    volumeSlider!: HTMLElement | null;
    volumeFill!: HTMLElement | null;
    volumeHandle!: HTMLElement | null;
    volumePercentage!: HTMLElement | null;
    playlistBtn!: HTMLElement | null;
    playlistTooltip!: HTMLElement | null;
    playlistList!: HTMLElement | null;
    volume: number;

    constructor() {
      this.currentSound = null;
      this.playlists = {};
      this.currentPlaylist = "Home";
      this.currentTrackIndex = 0;
      this.isPlaying = false;
      this.isDragging = false;
      this.duration = 0;
      this.volume = 1.0;
      this.initializeElements();
      this.loadPlaylist("Home").then(() => {
        this.loadTrack(this.currentTrackIndex);
        this.renderPlaylistMenu();
      });
      this.attachEventListeners();
    }

    initializeElements() {
      this.playPauseBtn = document.getElementById("playPauseBtn");
      this.prevBtn = document.getElementById("prevBtn");
      this.nextBtn = document.getElementById("nextBtn");
      this.trackTitle = document.getElementById("trackTitle");
      this.timeCurrent = document.getElementById("timeCurrent");
      this.timeTotal = document.getElementById("timeTotal");
      this.progressBar = document.getElementById("progressBar");
      this.progressFill = document.getElementById("progressFill");
      this.progressHandle = document.getElementById("progressHandle");
      this.playIcon = this.playPauseBtn?.querySelector(".play-icon") ?? null;
      this.pauseIcon = this.playPauseBtn?.querySelector(".pause-icon") ?? null;
      this.volumeBtn = document.getElementById("volumeBtn");
      this.volumeSlider = document.getElementById("volumeSlider");
      this.volumeFill = document.getElementById("volumeFill");
      this.volumeHandle = document.getElementById("volumeHandle");
      this.volumePercentage = document.getElementById("volumePercentage");
      this.playlistBtn = document.getElementById("playlistBtn");
      this.playlistTooltip = document.getElementById("playlistTooltip");
      this.playlistList = document.getElementById("playlistList");
    }

    get currentPlaylistTracks() {
      return this.playlists[this.currentPlaylist] || [];
    }

    async loadPlaylist(playlistName: string) {
      if (this.playlists[playlistName]) {
        return this.playlists[playlistName];
      }

      const playlistData = {
        Home: [
          {
            title: "Tranquility.mid",
            src: "/audio/playlist-home/Tranquility.mp3",
            artist: "Ambient",
            duration: "2:40",
          },
          {
            title: "MidnightExpress.mid",
            src: "/audio/playlist-home/MidnightExpress.mp3",
            artist: "Ambient",
            duration: "3:41",
          },
          {
            title: "AcrossTheUniverse.mid",
            src: "/audio/playlist-home/AcrossTheUniverse.mp3",
            artist: "Ambient",
            duration: "3:18",
          },
          {
            title: "loop-water-waves.wav",
            src: "/audio/playlist-home/loop-water-waves.wav",
            artist: "Ambient",
            duration: "3:42",
          },
        ],
        First: [
          {
            title: "lavitz-harpoon.wave",
            src: "/audio/playlist-first/Lavitz_Harpoon_Full.mp3",
            artist: "Lavitz",
            duration: "4:15",
          },
          {
            title: "Molecules",
            src: "/audio/playlist-first/Molecules_KristoffKrane+Sadistik-compressed.mp3",
            artist: "Kristoff Krane + Sadistik",
            duration: "3:28",
          },
          {
            title: "hit_-_with_1",
            src: "/audio/playlist-first/hit_-_with_1.mp3",
            artist: "Unknown",
            duration: "2:45",
          },
          {
            title: "A Wake",
            src: "/audio/playlist-first/Eyedea_ft._Slug_-_A_Wake_(192_kbps)-compressed.mp3",
            artist: "Eyedea ft. Slug",
            duration: "4:12",
          },
        ],
      };

      if (playlistData[playlistName as keyof typeof playlistData]) {
        this.playlists[playlistName] =
          playlistData[playlistName as keyof typeof playlistData];
        return this.playlists[playlistName];
      }

      return [];
    }

    loadTrack(index: number) {
      const playlist = this.currentPlaylistTracks;
      if (index < 0 || index >= playlist.length) return;

      if (this.currentSound) {
        this.currentSound.unload();
      }

      // Reset playing state and progress when loading a new track
      this.isPlaying = false;
      this.updatePlayPauseIcon();

      // Reset progress bar and time display
      if (this.progressFill) {
        this.progressFill.style.width = "0%";
      }
      if (this.progressHandle) {
        this.progressHandle.style.left = "0%";
      }
      if (this.timeCurrent) {
        this.timeCurrent.textContent = "0:00";
      }

      const track = playlist[index];
      this.currentTrackIndex = index;

      if (this.trackTitle) {
        const displayTitle = track.artist
          ? `${track.title} - ${track.artist}`
          : track.title;
        this.trackTitle.textContent = displayTitle;
      }

      this.currentSound = new (Howl as any)({
        src: [track.src],
        html5: true,
        volume: this.volume,
        onload: () => {
          this.duration = this.currentSound.duration();
          if (this.timeTotal) {
            this.timeTotal.textContent = this.formatTime(this.duration);
          }
        },
        onplay: () => {
          this.isPlaying = true;
          this.updatePlayPauseIcon();
          this.startProgressUpdate();
        },
        onpause: () => {
          this.isPlaying = false;
          this.updatePlayPauseIcon();
        },
        onend: () => {
          this.next();
        },
        onloaderror: () => {
          console.warn(`Failed to load: ${track.src}`);
          if (this.trackTitle) {
            this.trackTitle.textContent = `${track.title} (unavailable)`;
          }
        },
      });
    }

    play() {
      if (this.currentSound) {
        this.currentSound.play();
      }
    }

    pause() {
      if (this.currentSound) {
        this.currentSound.pause();
      }
    }

    togglePlayPause() {
      if (this.isPlaying) {
        this.pause();
      } else {
        this.play();
      }
    }

    prev() {
      const wasPlaying = this.isPlaying;
      const newIndex = this.currentTrackIndex - 1;
      if (newIndex >= 0) {
        this.loadTrack(newIndex);
        // Auto-play if the previous track was playing
        if (wasPlaying) {
          setTimeout(() => this.play(), 100);
        }
      }
    }

    next() {
      const wasPlaying = this.isPlaying;
      const newIndex = this.currentTrackIndex + 1;
      const playlist = this.currentPlaylistTracks;
      if (newIndex < playlist.length) {
        this.loadTrack(newIndex);
        // Auto-play if the previous track was playing
        if (wasPlaying) {
          setTimeout(() => this.play(), 100);
        }
      }
    }

    updatePlayPauseIcon() {
      if (this.playIcon && this.pauseIcon) {
        if (this.isPlaying) {
          this.playIcon.style.display = "none";
          this.pauseIcon.style.display = "block";
        } else {
          this.playIcon.style.display = "block";
          this.pauseIcon.style.display = "none";
        }
      }
    }

    startProgressUpdate() {
      const updateProgress = () => {
        if (this.currentSound && this.isPlaying && !this.isDragging) {
          const seek = this.currentSound.seek() || 0;
          const progress = (seek / this.duration) * 100;

          if (this.progressFill) {
            this.progressFill.style.width = `${progress}%`;
          }
          if (this.progressHandle) {
            this.progressHandle.style.left = `${progress}%`;
          }
          if (this.timeCurrent) {
            this.timeCurrent.textContent = this.formatTime(seek);
          }
        }

        if (this.isPlaying) {
          requestAnimationFrame(updateProgress);
        }
      };
      updateProgress();
    }

    formatTime(seconds: number) {
      const mins = Math.floor(seconds / 60);
      const secs = Math.floor(seconds % 60);
      return `${mins}:${secs.toString().padStart(2, "0")}`;
    }

    setVolume(volume: number) {
      this.volume = Math.max(0, Math.min(1, volume));
      if (this.currentSound) {
        this.currentSound.volume(this.volume);
      }
      this.updateVolumeDisplay();
    }

    updateVolumeDisplay() {
      const percentage = Math.round(this.volume * 100);

      if (this.volumeFill) {
        this.volumeFill.style.width = `${percentage}%`;
      }
      if (this.volumeHandle) {
        this.volumeHandle.style.left = `${percentage}%`;
      }
      if (this.volumePercentage) {
        this.volumePercentage.textContent = `${percentage}%`;
      }
    }

    attachEventListeners() {
      if (this.playPauseBtn) {
        this.playPauseBtn.addEventListener("click", () =>
          this.togglePlayPause()
        );
      }

      if (this.prevBtn) {
        this.prevBtn.addEventListener("click", () => this.prev());
      }

      if (this.nextBtn) {
        this.nextBtn.addEventListener("click", () => this.next());
      }

      if (this.progressBar && this.volumeSlider) {
        this.progressBar.addEventListener("click", (e: MouseEvent) => {
          if (this.currentSound && this.duration && this.progressBar) {
            const rect = this.progressBar.getBoundingClientRect();
            const percent = (e.clientX - rect.left) / rect.width;
            const seekTime = percent * this.duration;
            this.currentSound.seek(seekTime);
          }
        });

        this.progressBar.addEventListener("mousedown", () => {
          this.isDragging = true;
          document.addEventListener("mousemove", this.handleProgressDrag);
          document.addEventListener("mouseup", this.handleProgressDragEnd);
        });
      }

      // Volume slider event listeners
      if (this.volumeSlider && this.progressBar) {
        this.volumeSlider.addEventListener("click", (e: MouseEvent) => {
          if (this.volumeSlider) {
            const rect = this.volumeSlider.getBoundingClientRect();
            const percent = (e.clientX - rect.left) / rect.width;
            this.setVolume(percent);
          }
        });

        this.volumeSlider.addEventListener("mousedown", () => {
          document.addEventListener("mousemove", this.handleVolumeDrag);
          document.addEventListener("mouseup", this.handleVolumeDragEnd);
        });
      }

      // Playlist button event listener
      if (this.playlistBtn) {
        this.playlistBtn.addEventListener("click", () => {
          // Toggle playlist visibility or just let hover handle it
        });
      }

      // Initialize volume display
      this.updateVolumeDisplay();
    }

    handleProgressDrag = (e: MouseEvent) => {
      if (
        this.isDragging &&
        this.progressBar &&
        this.currentSound &&
        this.duration
      ) {
        const rect = this.progressBar.getBoundingClientRect();
        const percent = Math.max(
          0,
          Math.min(1, (e.clientX - rect.left) / rect.width)
        );
        const seekTime = percent * this.duration;

        if (this.progressFill) {
          this.progressFill.style.width = `${percent * 100}%`;
        }
        if (this.progressHandle) {
          this.progressHandle.style.left = `${percent * 100}%`;
        }
        if (this.timeCurrent) {
          this.timeCurrent.textContent = this.formatTime(seekTime);
        }
      }
    };

    handleProgressDragEnd = (e: MouseEvent) => {
      if (
        this.isDragging &&
        this.progressBar &&
        this.currentSound &&
        this.duration
      ) {
        const rect = this.progressBar.getBoundingClientRect();
        const percent = Math.max(
          0,
          Math.min(1, (e.clientX - rect.left) / rect.width)
        );
        const seekTime = percent * this.duration;
        this.currentSound.seek(seekTime);
      }

      this.isDragging = false;
      document.removeEventListener("mousemove", this.handleProgressDrag);
      document.removeEventListener("mouseup", this.handleProgressDragEnd);
    };

    handleVolumeDrag = (e: MouseEvent) => {
      if (this.volumeSlider) {
        const rect = this.volumeSlider.getBoundingClientRect();
        const percent = Math.max(
          0,
          Math.min(1, (e.clientX - rect.left) / rect.width)
        );
        this.setVolume(percent);
      }
    };

    handleVolumeDragEnd = () => {
      document.removeEventListener("mousemove", this.handleVolumeDrag);
      document.removeEventListener("mouseup", this.handleVolumeDragEnd);
    };

    // Playlist management methods
    async switchToPlaylist(playlistName: string, trackIndex: number = 0) {
      await this.loadPlaylist(playlistName);
      if (this.playlists[playlistName]) {
        this.currentPlaylist = playlistName;
        this.currentTrackIndex = trackIndex;
        this.loadTrack(trackIndex);
        this.renderPlaylistMenu();
      }
    }

    playTrack(playlistName: string, trackIndex: number) {
      const wasPlaying = this.isPlaying;
      this.switchToPlaylist(playlistName, trackIndex);
      if (wasPlaying || !this.isPlaying) {
        setTimeout(() => this.play(), 100);
      }
    }

    renderPlaylistMenu() {
      if (!this.playlistList) return;

      this.playlistList.innerHTML = "";

      const availablePlaylists = ["Home", "First"];

      availablePlaylists.forEach((playlistName) => {
        const isActive = playlistName === this.currentPlaylist;

        // Create simple playlist item
        const playlistItem = document.createElement("div");
        playlistItem.className = `playlist-item ${isActive ? "active" : ""}`;
        playlistItem.textContent = playlistName;

        playlistItem.addEventListener("click", () => {
          this.switchToPlaylist(playlistName);
        });

        this.playlistList?.appendChild(playlistItem);
      });
    }
  }

  // Initialize audio player as singleton when DOM is ready
  function initializeAudioPlayer() {
    if (typeof Howl !== "undefined" && !window.audioPlayerSingleton) {
      window.audioPlayerSingleton = new AudioPlayerManager();
    }
  }

  // Initialize after Howler.js is loaded (only once per browser session)
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      setTimeout(initializeAudioPlayer, 100);
    });
  } else {
    setTimeout(initializeAudioPlayer, 100);
  }

  // NO reinitialization after navigation - let transition:persist handle it
</script>
