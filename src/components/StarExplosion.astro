<div class="star-explosion-container" id="starExplosion">
  <div class="star-center">
    <svg viewBox="0 0 100 100" class="star-svg">
      <image
        href="/Starscape-Star.png"
        x="0"
        y="0"
        width="100"
        height="100"
        class="star-path"
      />
      <!-- <defs>
        <radialGradient id="starGradient" cx="50%" cy="50%" r="50%">
          <stop offset="0%" style="stop-color:#3b82f6;stop-opacity:1"></stop>
          <stop offset="50%" style="stop-color:#1d4ed8;stop-opacity:1"></stop>
          <stop offset="100%" style="stop-color:#1e293b;stop-opacity:0.8"></stop>
        </radialGradient>
      </defs>
      <path
        d="M50 10 L58 35 L85 35 L65 52 L73 77 L50 62 L27 77 L35 52 L15 35 L42 35 Z"
        fill="url(#starGradient)"
        class="star-path"></path> -->
    </svg>
  </div>

  <!-- Stardust particles -->
  <div class="stardust-container">
    {
      Array.from({ length: 20 }, (_, i) => {
        const angle = (360 / 20) * i;
        const distance = 160 + Math.sin(i * 0.5) * 60; // Vary distance between 160-220px
        const delay = 0.8 + i * 0.05; // Stagger delays from 0.8s to 1.75s

        return (
          <div
            class="stardust"
            key={i}
            style={`--angle: ${angle}deg; --distance: ${distance}px; --delay: ${delay}s;`}
          >
            <div class="particle" />
          </div>
        );
      })
    }
  </div>
</div>

<style>
  .star-explosion-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    pointer-events: none;
    z-index: 2000;
    opacity: 0;
  }

  .star-explosion-container.active {
    opacity: 1;
  }

  .star-center {
    position: relative;
    width: 120px;
    height: 120px;
    transform: scale(0);
    animation: starExplosion 2.5s linear forwards;
  }

  .star-svg {
    width: 100%;
    height: 100%;
  }

  .star-path {
    animation: starPulse 0.8s ease-in-out infinite;
  }

  .stardust-container {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    transform: translate(-50%, -50%);
  }

  .stardust {
    position: absolute;
    width: 4px;
    height: 4px;
    opacity: 0;
    animation: explode 1.5s ease-out var(--delay) forwards;
  }

  .particle {
    width: 100%;
    height: 100%;
    background: radial-gradient(
      circle,
      #3b82f6 0%,
      #1d4ed8 50%,
      transparent 100%
    );
    border-radius: 50%;
    box-shadow: 0 0 6px rgba(59, 130, 246, 0.8);
  }

  /* Stardust explosion animations - now handled programmatically */

  @keyframes starExplosion {
    0% {
      transform: scale(0) rotate(0deg);
      opacity: 0;
    }
    25% {
      transform: scale(1.2) rotate(112.5deg);
      opacity: 1;
    }
    50% {
      transform: scale(1.8) rotate(225deg);
      opacity: 1;
    }
    75% {
      transform: scale(1.2) rotate(337.5deg);
      opacity: 0.8;
    }
    100% {
      transform: scale(0.2) rotate(450deg);
      opacity: 0;
    }
  }

  @keyframes starPulse {
    0%,
    100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
  }

  @keyframes explode {
    0% {
      opacity: 1;
      transform: translate(0, 0) scale(1);
    }
    50% {
      opacity: 1;
      transform: translate(
          calc(cos(var(--angle)) * var(--distance)),
          calc(sin(var(--angle)) * var(--distance))
        )
        scale(0.8);
    }
    100% {
      opacity: 0;
      transform: translate(
          calc(cos(var(--angle)) * calc(var(--distance) * 0.3)),
          calc(sin(var(--angle)) * calc(var(--distance) * 0.3) - 50px)
        )
        scale(0.3);
    }
  }

  /* Hide animation after completion */
  .star-explosion-container.completed {
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.5s ease-out;
  }

  @media (max-width: 768px) {
    .star-center {
      width: 80px;
      height: 80px;
    }

    .stardust {
      --distance: 120px !important;
    }
  }
</style>

<script>
  class StarExplosion {
    private container: HTMLElement | null;
    private isPlaying: boolean = false;

    constructor() {
      this.container = document.getElementById("starExplosion");
      this.init();
    }

    private init() {
      // Check if animation has already played this session
      const hasPlayed = sessionStorage.getItem("starExplosionPlayed");

      if (!hasPlayed) {
        // Start animation on first load
        setTimeout(() => {
          this.play();
        }, 500);
      } else {
        // Skip animation and reveal content immediately
        setTimeout(() => {
          this.complete();
        }, 100);
      }
    }

    public play() {
      if (this.isPlaying || !this.container) return;

      this.isPlaying = true;
      this.container.classList.add("active");

      // Complete animation after 2.5 seconds
      setTimeout(() => {
        this.complete();
      }, 2500);
    }

    private complete() {
      if (!this.container) return;

      this.container.classList.add("completed");
      this.isPlaying = false;

      // Mark as played for this session
      sessionStorage.setItem("starExplosionPlayed", "true");

      // Trigger content reveal
      document.dispatchEvent(new CustomEvent("starExplosionComplete"));
    }
  }

  // Initialize star explosion when DOM is loaded
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      new StarExplosion();
    });
  } else {
    new StarExplosion();
  }
</script>
