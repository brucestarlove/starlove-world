---
export interface Props {
  id?: string;
  class?: string;
  delay?: string;
}

const { id, class: className = "", delay = "0s" } = Astro.props;
---

<div
  id={id}
  class={`content content-reveal content-hidden ${className}`}
  style={delay !== "0s" ? `animation-delay: ${delay}` : ""}
>
  <slot />
</div>

<style>
  .content-hidden {
    opacity: 0;
    transform: translateY(20px);
  }
  
  .content-revealed {
    opacity: 1;
    transform: translateY(0);
    transition: opacity 0.8s ease-out, transform 0.8s ease-out;
  }
</style>

<script>
  // Wait for star explosion to complete before revealing content
  document.addEventListener("starExplosionComplete", () => {
    const contentElements = document.querySelectorAll(".content-reveal");
    contentElements.forEach(el => {
      el.classList.remove("content-hidden");
      el.classList.add("content-revealed");
    });
  });

  // Also check if star explosion already completed (for navigation)
  document.addEventListener("DOMContentLoaded", () => {
    const hasPlayed = sessionStorage.getItem("starExplosionPlayed");
    if (hasPlayed) {
      setTimeout(() => {
        const contentElements = document.querySelectorAll(".content-reveal");
        contentElements.forEach(el => {
          el.classList.remove("content-hidden");
          el.classList.add("content-revealed");
        });
      }, 150); // Small delay to let star explosion complete event fire
    }
  });

  // Handle Astro navigation
  document.addEventListener("astro:after-swap", () => {
    const hasPlayed = sessionStorage.getItem("starExplosionPlayed");
    if (hasPlayed) {
      setTimeout(() => {
        const contentElements = document.querySelectorAll(".content-reveal");
        contentElements.forEach(el => {
          el.classList.remove("content-hidden");
          el.classList.add("content-revealed");
        });
      }, 150);
    }
  });

  // Fallback: reveal content after a delay if no star explosion happens
  setTimeout(() => {
    const contentElements = document.querySelectorAll(".content-reveal.content-hidden");
    if (contentElements.length > 0) {
      contentElements.forEach(el => {
        el.classList.remove("content-hidden");
        el.classList.add("content-revealed");
      });
    }
  }, 2000); // 2 second fallback
</script>
