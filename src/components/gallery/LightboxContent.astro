---
export interface ContentSection {
  text: string;
  highlights?: string[];
}

export interface Props {
  id: string;
  theme?:
    | "starscape"
    | "cityscape"
    | "forestscape"
    | "evershade"
    | "horizons"
    | "custom";
  title?: string;
  sections: ContentSection[];
  footer?: string;
  customGradient?: string;
  maxWidth?: string;
}

const {
  id,
  theme = "evershade",
  title,
  sections,
  footer,
  customGradient,
  maxWidth = "600px",
} = Astro.props;

// Theme gradient mappings
const themeGradients = {
  starscape:
    "linear-gradient(135deg, var(--starscape-start) 0%, var(--starscape-mid) 50%, var(--starscape-end) 100%)",
  cityscape: "linear-gradient(135deg, #fbbf24 0%, #f59e0b 50%, #d97706 100%)",
  forestscape: "linear-gradient(135deg, #22c55e 0%, #16a34a 50%, #15803d 100%)",
  evershade:
    "linear-gradient(135deg, var(--evershade-start) 0%, var(--evershade-mid) 50%, var(--evershade-end) 100%)",
  horizons: "linear-gradient(135deg, #fce473 0%, #f2933d 50%, #d94c2d 100%)",
  custom:
    customGradient ||
    "linear-gradient(135deg, var(--accent-bg) 0%, var(--glow-color) 100%)",
};

const gradient = themeGradients[theme];

// Function to process text with highlights
function processText(text: string, highlights: string[] = []) {
  let processedText = text;

  // Replace markdown-style bold (**text**)
  processedText = processedText.replace(
    /\*\*(.*?)\*\*/g,
    "<strong>$1</strong>"
  );

  // Apply highlights
  highlights.forEach((highlight) => {
    const regex = new RegExp(`\\b${highlight}\\b`, "gi");
    processedText = processedText.replace(
      regex,
      `<strong>${highlight}</strong>`
    );
  });

  return processedText;
}
---

<div id={id} class="lightbox-content">
  <div
    class="lightbox-container"
    style={`background: ${gradient}; max-width: ${maxWidth};`}
  >
    {title && <h2 class="lightbox-title">{title}</h2>}

    {
      sections.map((section) => (
        <p
          class="lightbox-text"
          set:html={processText(section.text, section.highlights)}
        />
      ))
    }

    {footer && <p class="lightbox-footer">{footer}</p>}
  </div>
</div>

<style>
  .lightbox-content {
    display: none;
  }

  .lightbox-container {
    padding: 2rem;
    color: white;
    text-align: center;
    border-radius: 12px;
    margin: 0 auto;
  }

  .lightbox-title {
    margin-bottom: 1.5rem;
    font-size: 1.8rem;
    font-weight: 700;
    line-height: 1.2;
  }

  .lightbox-text {
    line-height: 1.6;
    margin-bottom: 1rem;
    font-size: 1rem;
  }

  .lightbox-text:last-of-type {
    margin-bottom: 1.5rem;
  }

  .lightbox-footer {
    font-style: italic;
    opacity: 0.9;
    margin-bottom: 0;
    font-size: 0.95rem;
  }

  .lightbox-text :global(strong) {
    background: linear-gradient(
      135deg,
      var(--starscape-start) 0%,
      var(--starscape-mid) 50%,
      var(--starscape-end) 100%
    );
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    font-weight: 600;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .lightbox-container {
      padding: 1.5rem;
      max-width: 90vw !important;
    }

    .lightbox-title {
      font-size: 1.5rem;
      margin-bottom: 1rem;
    }

    .lightbox-text {
      font-size: 0.9rem;
    }
  }
</style>
