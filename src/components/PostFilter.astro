---
// Post filtering component
export interface Props {
  filters?: string[];
  activeFilters?: string[];
}

const { 
  filters = ['oc', 'share', 'tech', 'hobby', 'idea', 'politic', 'project', 'event', 'movement', 'life'],
  activeFilters = ['oc', 'share', 'tech', 'hobby', 'idea', 'politic', 'project', 'event', 'movement', 'life']
} = Astro.props;
---

<div class="post-filter">
  <div class="filter-pills">
    {filters.map((filter) => (
      <button 
        class={`filter-pill ${activeFilters.includes(filter) ? 'active' : ''}`}
        data-filter={filter}
        key={filter}
      >
        {filter}
      </button>
    ))}
  </div>
</div>

<style>
  .post-filter {
    margin-bottom: 2rem;
  }

  .filter-pills {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .filter-pill {
    padding: 0.5rem 1rem;
    border: 2px solid var(--border-color);
    background: var(--secondary-bg);
    color: var(--text-secondary);
    border-radius: 50px;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    text-transform: lowercase;
    position: relative;
    overflow: hidden;
  }

  .filter-pill::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(96, 165, 250, 0.2), transparent);
    transition: left 0.3s ease;
  }

  .filter-pill:hover::before {
    left: 100%;
  }

  .filter-pill:hover {
    border-color: var(--accent-bg);
    color: var(--text-primary);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.2);
  }

  .filter-pill.active {
    background: var(--accent-bg);
    border-color: var(--accent-bg);
    color: white;
    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
  }

  .filter-pill.active:hover {
    background: var(--glow-color);
    border-color: var(--glow-color);
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(96, 165, 250, 0.4);
  }

  /* Special styling for boolean filters */
  .filter-pill[data-filter="oc"],
  .filter-pill[data-filter="share"] {
    position: relative;
  }

  .filter-pill[data-filter="oc"]::after,
  .filter-pill[data-filter="share"]::after {
    content: '';
    position: absolute;
    top: -2px;
    right: -2px;
    width: 6px;
    height: 6px;
    background: var(--accent-bg);
    border-radius: 50%;
    opacity: 0;
    transition: opacity 0.2s ease;
  }

  .filter-pill[data-filter="oc"].active::after,
  .filter-pill[data-filter="share"].active::after {
    opacity: 1;
    background: white;
  }

  @media (max-width: 768px) {
    .filter-pills {
      gap: 0.375rem;
    }
    
    .filter-pill {
      padding: 0.375rem 0.75rem;
      font-size: 0.8125rem;
    }
  }
</style>

<script>
  class PostFilter {
    private filterPills: NodeListOf<HTMLButtonElement>;
    private activeFilters: Set<string>;

    constructor() {
      this.filterPills = document.querySelectorAll('.filter-pill');
      this.activeFilters = new Set();
      this.init();
    }

    private init() {
      // Initialize active filters from DOM
      this.filterPills.forEach(pill => {
        if (pill.classList.contains('active')) {
          this.activeFilters.add(pill.dataset.filter || '');
        }
      });

      // Add click event listeners
      this.filterPills.forEach(pill => {
        pill.addEventListener('click', () => {
          this.toggleFilter(pill);
        });
      });
    }

    private toggleFilter(pill: HTMLButtonElement) {
      const filter = pill.dataset.filter || '';
      const isBoolean = filter === 'oc' || filter === 'share';

      if (isBoolean) {
        // Boolean filters: toggle on/off
        if (this.activeFilters.has(filter)) {
          this.activeFilters.delete(filter);
          pill.classList.remove('active');
        } else {
          this.activeFilters.add(filter);
          pill.classList.add('active');
        }
      } else {
        // Optional filters: toggle on/off
        if (this.activeFilters.has(filter)) {
          this.activeFilters.delete(filter);
          pill.classList.remove('active');
        } else {
          this.activeFilters.add(filter);
          pill.classList.add('active');
        }
      }

      // Dispatch filter change event
      document.dispatchEvent(new CustomEvent('filterChange', {
        detail: {
          activeFilters: Array.from(this.activeFilters)
        }
      }));

      // Apply filtering to posts
      this.filterPosts();
    }

    private filterPosts() {
      const posts = document.querySelectorAll('.post-item');
      
      posts.forEach(post => {
        const postElement = post as HTMLElement;
        const postTags = postElement.dataset.tags ? postElement.dataset.tags.split(',') : [];
        
        // Check if post should be visible based on active filters
        const shouldShow = postTags.some(tag => this.activeFilters.has(tag.trim()));
        
        if (shouldShow) {
          postElement.style.display = 'block';
          postElement.style.animation = 'fadeIn 0.3s ease-out';
        } else {
          postElement.style.display = 'none';
        }
      });
    }

    public getActiveFilters(): string[] {
      return Array.from(this.activeFilters);
    }
  }

  // Initialize post filter when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new PostFilter();
    });
  } else {
    new PostFilter();
  }
</script>